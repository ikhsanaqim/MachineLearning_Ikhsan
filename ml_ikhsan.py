# -*- coding: utf-8 -*-
"""ML-Ikhsan.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uPWYi2uhJqqU67-VtnPgYkj3VVJCRenE

**Import Library**
"""

!pip install split-folders

# Commented out IPython magic to ensure Python compatibility.
import tensorflow as tf

import zipfile, os

import splitfolders

from keras_preprocessing.image import ImageDataGenerator

from keras_preprocessing import image

import numpy as np

from google.colab import files

import matplotlib.pyplot as plt
import matplotlib.image as mpimg
# %matplotlib inline

"""**Get Data**"""

!wget --no-check-certificate \
  https://github.com/dicodingacademy/assets/releases/download/release/rockpaperscissors.zip \
  -O /tmp/rockpaperscissors.zip

"""### **Ekstrak Data**"""

local_zip = '/tmp/rockpaperscissors.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/tmp')
zip_ref.close()

"""### **Split Data**"""

base_dir = '/tmp/rockpaperscissors/rps-cv-images'
train_dir = '/content/output/train'
validation_dir = '/content/output/val'

splitfolders.ratio(base_dir, output = "output", seed = 1337, ratio = (.6, .4), group_prefix = None)

"""### **Callback**"""

class Callback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy') > 0.97):
      print("\nAkurasi sudah di atas 97%, maka training data dihentikan!")
      self.model.stop_training = True

callbacks = Callback()

"""### **Augmentation and Generate**"""

train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range = 20,
    vertical_flip = True,
    shear_range = 0.2,
    fill_mode = 'nearest'
)
 
test_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range = 20,
    vertical_flip = True,
    shear_range = 0.2,
    fill_mode = 'nearest'
)

train_generator = train_datagen.flow_from_directory(
        train_dir,  # Direktori data latih
        target_size = (150, 150),  # Mengubah resolusi seluruh gambar menjadi 150 x 150 piksel
        batch_size = 32,
        # Karena ini merupakan masalah klasifikasi 3 kelas, maka gunakan class_mode 'categorical'
        class_mode = 'categorical')
 
validation_generator = test_datagen.flow_from_directory(
        validation_dir, # Direktori data validasi
        target_size = (150, 150), # Mengubah resolusi seluruh gambar menjadi 150 x 150 piksel
        batch_size = 32,
        # Karena ini merupakan masalah klasifikasi 3 kelas, maka gunakan class_mode 'categorical'
        class_mode = 'categorical')

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation = 'relu', input_shape = (150, 150, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(64, (3,3), activation = 'relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation = 'relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation = 'relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512, activation = 'relu'),
    tf.keras.layers.Dense(3, activation = 'softmax')
])

model.summary()

model.compile(loss='categorical_crossentropy',
              optimizer=tf.optimizers.Adam(),
              metrics=['accuracy'])

historyModel = model.fit(
    train_generator,
    steps_per_epoch = 25,
    epochs = 20,
    validation_data = validation_generator,
    validation_steps = 5,
    verbose = 2,
    callbacks = [callbacks])

plt.plot(historyModel.history['loss'], label = 'Training Loss')
plt.plot(historyModel.history['val_loss'], label = 'Validation Loss')
plt.title('Loss Plot')
plt.ylabel('Value')
plt.xlabel('Epoch')
plt.legend(loc = "upper right")
plt.show()

plt.plot(historyModel.history['accuracy'], label = 'Training Accuracy')
plt.plot(historyModel.history['val_accuracy'], label = 'Validation Accuracy')
plt.title('Accuracy Plot')
plt.ylabel('Value')
plt.xlabel('Epoch')
plt.legend(loc = "lower right")
plt.show()

uploaded = files.upload()

for fn in uploaded.keys():

  path = fn
  img = image.load_img(path, target_size = (150, 150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis = 0)

  images = np.vstack([x])
  classes = model.predict(images, batch_size = 10)

  print(fn)
  if classes[0, 0] != 0:
    print('paper')
  elif classes[0, 1] != 0:
    print('rock')
  else:
    print('scissors')

"""# **Dibuat Oleh Ikhsan Mustaqim, Mahasiswa Universitas Diponegoro**"""